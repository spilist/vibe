# Coding Preferences

- Simplicity: Always prioritize the simplest solution over complexity.
- No Duplication: Avoid repeating code; reuse existing functionality when possible.
- Organization: Keep files concise, under 200-300 lines; refactor as needed.
- Documentation: After major components, write a brief summary in /docs/[component].md (e.g., login.md).
- Principle: Follow SOLID principles (e.g., single responsibility, dependency inversion) where applicable.
- Efficiency: Optimize outputs to minimize token usage without sacrificing clarity.

# Tech Stack

Never alter the stack without my explicit approval. If I specify additional tools (e.g., Elasticsearch for search), include them here.

- Frontend: NextJS with TypeScript
- Backend: React Server Components with TypeScript
- Database: Supabase
- Authentication: Supabase Auth
- Test: Jest with React Testing Library

# Workflow Preferences

- Focus: Modify only the code I specify; leave everything else untouched.
- Steps: Break large tasks into stages; pause after each for my approval.
- Planning: Before big changes, write a plan.md and await my confirmation.
- Tracking: Log completed work in progress.md and next steps in TODO.txt.
- Testing: Include comprehensive tests for major features; suggest edge case tests (e.g., invalid inputs).
- Context Management: If context exceeds 100k tokens, summarize into context-summary.md and restart the session.
- Adaptability: Adjust checkpoint frequency based on my feedback (more/less granularity).

# Communication

- Summaries: After each component, summarize whatâ€™s done.
- Change Scale: Classify changes as Small, Medium, or Large.
- Clarification: If my request is unclear, ask me before proceeding.
